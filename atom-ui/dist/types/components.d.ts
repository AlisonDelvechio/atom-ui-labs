/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface AtomAlert {
        /**
          * @default 'web'
         */
        "device": 'web' | 'mobile';
        /**
          * @default false
         */
        "hasCloseIcon": boolean;
        /**
          * @default true
         */
        "hasStatusIcon": boolean;
        /**
          * @default 'info'
         */
        "icon": 'check' | 'error' | 'warning' | 'info';
        "iconColor": string;
        /**
          * @default 'info'
         */
        "status": 'success' | 'error' | 'warning' | 'info';
        "strokeColor": string;
        "text": string;
        "textColor": string;
    }
    interface AtomButton {
        /**
          * Texto opcional para acessibilidade
         */
        "label": string;
        /**
          * Tipo do botão (button, submit, etc)
          * @default 'button'
         */
        "type": 'button' | 'submit' | 'reset';
        /**
          * Estilo customizável
          * @default 'primary'
         */
        "variant": 'primary' | 'secondary';
    }
    interface MenuAccordion {
        /**
          * @default 'web'
         */
        "device": 'web' | 'mobile';
        /**
          * @default false
         */
        "expanded": boolean;
        /**
          * @default ''
         */
        "heading": string;
        /**
          * @default []
         */
        "items": string[];
    }
}
export interface AtomAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomAlertElement;
}
export interface AtomButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAtomButtonElement;
}
declare global {
    interface HTMLAtomAlertElementEventMap {
        "atomClick": void;
    }
    interface HTMLAtomAlertElement extends Components.AtomAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomAlertElementEventMap>(type: K, listener: (this: HTMLAtomAlertElement, ev: AtomAlertCustomEvent<HTMLAtomAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomAlertElementEventMap>(type: K, listener: (this: HTMLAtomAlertElement, ev: AtomAlertCustomEvent<HTMLAtomAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomAlertElement: {
        prototype: HTMLAtomAlertElement;
        new (): HTMLAtomAlertElement;
    };
    interface HTMLAtomButtonElementEventMap {
        "atomClick": void;
    }
    interface HTMLAtomButtonElement extends Components.AtomButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAtomButtonElementEventMap>(type: K, listener: (this: HTMLAtomButtonElement, ev: AtomButtonCustomEvent<HTMLAtomButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAtomButtonElementEventMap>(type: K, listener: (this: HTMLAtomButtonElement, ev: AtomButtonCustomEvent<HTMLAtomButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAtomButtonElement: {
        prototype: HTMLAtomButtonElement;
        new (): HTMLAtomButtonElement;
    };
    interface HTMLMenuAccordionElement extends Components.MenuAccordion, HTMLStencilElement {
    }
    var HTMLMenuAccordionElement: {
        prototype: HTMLMenuAccordionElement;
        new (): HTMLMenuAccordionElement;
    };
    interface HTMLElementTagNameMap {
        "atom-alert": HTMLAtomAlertElement;
        "atom-button": HTMLAtomButtonElement;
        "menu-accordion": HTMLMenuAccordionElement;
    }
}
declare namespace LocalJSX {
    interface AtomAlert {
        /**
          * @default 'web'
         */
        "device"?: 'web' | 'mobile';
        /**
          * @default false
         */
        "hasCloseIcon"?: boolean;
        /**
          * @default true
         */
        "hasStatusIcon"?: boolean;
        /**
          * @default 'info'
         */
        "icon"?: 'check' | 'error' | 'warning' | 'info';
        "iconColor"?: string;
        "onAtomClick"?: (event: AtomAlertCustomEvent<void>) => void;
        /**
          * @default 'info'
         */
        "status"?: 'success' | 'error' | 'warning' | 'info';
        "strokeColor"?: string;
        "text"?: string;
        "textColor"?: string;
    }
    interface AtomButton {
        /**
          * Texto opcional para acessibilidade
         */
        "label"?: string;
        /**
          * Evento emitido ao clicar
         */
        "onAtomClick"?: (event: AtomButtonCustomEvent<void>) => void;
        /**
          * Tipo do botão (button, submit, etc)
          * @default 'button'
         */
        "type"?: 'button' | 'submit' | 'reset';
        /**
          * Estilo customizável
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary';
    }
    interface MenuAccordion {
        /**
          * @default 'web'
         */
        "device"?: 'web' | 'mobile';
        /**
          * @default false
         */
        "expanded"?: boolean;
        /**
          * @default ''
         */
        "heading"?: string;
        /**
          * @default []
         */
        "items"?: string[];
    }
    interface IntrinsicElements {
        "atom-alert": AtomAlert;
        "atom-button": AtomButton;
        "menu-accordion": MenuAccordion;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "atom-alert": LocalJSX.AtomAlert & JSXBase.HTMLAttributes<HTMLAtomAlertElement>;
            "atom-button": LocalJSX.AtomButton & JSXBase.HTMLAttributes<HTMLAtomButtonElement>;
            "menu-accordion": LocalJSX.MenuAccordion & JSXBase.HTMLAttributes<HTMLMenuAccordionElement>;
        }
    }
}
